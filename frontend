{
  "name": "web3dataentry-frontend",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "axios": "^1.4.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "socket.io-client": "^4.7.5"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build"
  }
}

<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Web3Data Entry - Pi</title>
  <link rel="stylesheet" href="/App.css" />
  <!-- Pi SDK (Pi Browser) -->
  <script src="https://sdk.minepi.com/pi-sdk.js"></script>
  <script>
    if (window.Pi) {
      Pi.init({ version: "2.0", sandbox: false });
      // sandbox true if testing with Developer Portal sandbox enabled
    }
  </script>
</head>
<body>
  <div id="root"></div>
  <script src="/static/js/bundle.js"></script>
</body>
</html>
import React from "react";
import { createRoot } from "react-dom/client";
import App from "./App";
import "./App.css";

createRoot(document.getElementById("root")).render(<App />);
import React, { useState, useEffect } from "react";
import axios from "axios";
import io from "socket.io-client";
import Dashboard from "./components/Dashboard";

const API_URL = process.env.REACT_APP_API_URL || "http://localhost:5000";

export default function App(){
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(false);
  const [socket, setSocket] = useState(null);

  useEffect(()=> {
    if (user && !socket) {
      const s = io(API_URL);
      s.on("connect", ()=> console.log("socket connected", s.id));
      s.emit("join", user.walletAddress);
      s.on("earning:update", (data)=> {
        // bubble to dashboard via event or state update (Dashboard will listen via prop)
        console.log("earning:update", data);
      });
      setSocket(s);
    }
    return ()=> {
      if (socket) socket.disconnect();
    }
  }, [user]);

  // Pi Browser login
  const handlePiLogin = async () => {
    if (!window.Pi) { alert("Open in Pi Browser"); return; }
    try {
      setLoading(true);
      const auth = await window.Pi.authenticate(['username']);
      if (!auth || !auth.accessToken) { alert("Auth failed"); setLoading(false); return; }
      const res = await axios.post(`${API_URL}/auth/verify`, { accessToken: auth.accessToken });
      if (res.data.success) {
        setUser(res.data.user);
      } else alert(res.data.message || "Verify failed");
    } catch(err) {
      console.error(err);
      alert("Login failed");
    } finally { setLoading(false); }
  };

  // Manual fallback login with consent checkbox
  const handleManual = async (wallet, name, consent) => {
    try {
      setLoading(true);
      const res = await axios.post(`${API_URL}/auth/login`, { walletAddress: wallet, fullName: name, consent });
      if (res.data.success) setUser(res.data.user);
      else alert(res.data.message || "Login failed");
    } catch(err){ console.error(err); alert("Network error"); } finally { setLoading(false); }
  };

  if (user) return <Dashboard user={user} socket={socket} onLogout={()=> setUser(null)} apiUrl={API_URL} />;

  return (
    <div className="app-container">
      <div className="login-card">
        <h2>üîê Web3Data Entry</h2>
        <p>Sign in with Pi Browser</p>
        <button className="login-btn" onClick={handlePiLogin} disabled={loading}>{loading ? "Signing..." : "Sign in with Pi"}</button>
        <hr style={{opacity:0.2}} />
        <ManualLogin onLogin={handleManual} />
      </div>
    </div>
  );
}

function ManualLogin({ onLogin }){
  const [wallet, setWallet] = useState("");
  const [name, setName] = useState("");
  const [consent, setConsent] = useState(false);
  return (
    <>
      <input placeholder="Wallet address" value={wallet} onChange={e=>setWallet(e.target.value)} />
      <input placeholder="Full name" value={name} onChange={e=>setName(e.target.value)} />
      <label style={{fontSize:12, color:'#ddd', display:'block', marginTop:6}}>
        <input type="checkbox" checked={consent} onChange={e=>setConsent(e.target.checked)} /> I accept the Terms & Legal consent
      </label>
      <button className="login-btn" style={{marginTop:8}} onClick={()=> onLogin(wallet, name, consent)}>Sign in (Manual)</button>
    </>
  );
}
import React, { useEffect, useState } from "react";
import axios from "axios";

export default function Dashboard({ user, socket, onLogout, apiUrl }) {
  const [earnings, setEarnings] = useState([]);
  const [piInput, setPiInput] = useState("");
  const [note, setNote] = useState("");
  const [rateInfo, setRateInfo] = useState({ piUsd: Number(process.env.REACT_APP_PI_USD_RATE || 314159), usdInr: Number(process.env.REACT_APP_USD_INR_RATE || 83) });

  useEffect(()=> {
    if (socket) {
      socket.on("earning:update", (data)=> {
        // prepend update
        setEarnings(prev => [data, ...prev]);
      });
    }
    // load history
    (async ()=> {
      try {
        const res = await axios.get(`${apiUrl}/earnings/${user.walletAddress}`);
        if (res.data.success) setEarnings(res.data.items.map(i => ({ piAmount: i.piAmount, usdAmount: i.usdAmount, inrAmount: i.inrAmount, note:i.note, createdAt: i.createdAt })));
      } catch(err){ console.error(err); }
    })();
  }, [socket]);

  const addEarning = async ()=> {
    const pi = Number(piInput);
    if (!pi || pi <= 0) return alert("Enter Pi amount");
    try {
      await axios.post(`${apiUrl}/earnings/add`, { walletAddress: user.walletAddress, piAmount: pi, note });
      setPiInput(""); setNote("");
      // server will emit update
    } catch(err){ console.error(err); alert("Add earning failed"); }
  };

  return (
    <div style={{padding:20}}>
      <h2>Welcome, {user.fullName || user.walletAddress}</h2>
      <p>Wallet: {user.walletAddress}</p>

      <div style={{marginTop:20, marginBottom:20}}>
        <strong>Rates:</strong>
        <div>1 Pi = ${rateInfo.piUsd.toLocaleString()}</div>
        <div>1 USD = ‚Çπ{rateInfo.usdInr.toLocaleString()}</div>
      </div>

      <div style={{marginBottom:10}}>
        <input placeholder="Pi earned" value={piInput} onChange={e=>setPiInput(e.target.value)} />
        <input placeholder="Note" value={note} onChange={e=>setNote(e.target.value)} />
        <button onClick={addEarning} style={{marginLeft:8}}>Add Earning</button>
      </div>

      <h3>Recent Earnings</h3>
      <ul>
        {earnings.map((it, idx)=> (
          <li key={idx}>
            {new Date(it.createdAt).toLocaleString()} ‚Äî {it.piAmount} Pi ‚Ä¢ ${Number(it.usdAmount).toLocaleString()} ‚Ä¢ ‚Çπ{Number(it.inrAmount).toLocaleString()} ‚Ä¢ {it.note}
          </li>
        ))}
      </ul>

      <button onClick={onLogout} style={{marginTop:20}}>Logout</button>
    </div>
  );
}
